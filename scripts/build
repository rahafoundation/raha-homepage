#!/usr/bin/env bash

# do everything in a subshell
(
  # configuration
  CUSTOM_DOMAIN="raha.io"

  # colors for output
  RED='\033[0;31m'
  GREEN='\033[0;32m'
  DARK_GRAY='\033[1;30m'
  NO_COLOR='\033[0m'

  # code from https://stackoverflow.com/a/246128/1105281
  function getScriptLocation()
  {
    local source="${BASH_SOURCE[0]}"
    while [ -h "$source" ]; do # resolve $source until the file is no longer a symlink
      local sourceDir="$( cd -P "$( dirname "$source" )" && pwd )"
      local source="$(readlink "$source")"
      [[ $source != /* ]] && source="$sourceDir/$source" # if $source was a relative symlink, we need to resolve it relative to the path where the symlink file was located
    done
    echo "$( cd -P "$( dirname "$source" )" && pwd )"
  }

  # cd to the root of the project
  sourceDir=$(getScriptLocation)
  rootDir=$(dirname "$sourceDir")
  cd $rootDir

  LOCALES_DIR="$rootDir/locales"

  # Construct static-i18n language flags
  # Assumes that we're in the project root
  # Assumes locale files JSON, and in `locales/` directory, not in a
  # subdirectory, and no other JSON files in there
  # Assumes default is English (en)
  function constructLanguageFlags()
  {
    local flags="-l en"
    for localeFile in $LOCALES_DIR/*.json; do
      local localeName="${localeFile%.json}"
      local localeName="${localeName#$LOCALES_DIR/}"
      local flags="$(echo "$flags -i $localeName")"
    done
    echo "$flags"
  }

  # relevant directories
  SRC_DIR="$rootDir/src"
  OUT_DIR="$rootDir/build"
  I18N_TMP_DIR="$rootDir/build.i18n.tmp"
  HANDLEBARS_TMP_DIR="$rootDir/build.hbs.tmp"
  ASSETS_DIR="$rootDir/assets"

  #########
  # Compile Handlebars templates
  #########

  echo -e "${DARK_GRAY}Compiling Handlebars templates:${NO_COLOR}"
  node "$rootDir/scripts/buildHandlebars.js" "$HANDLEBARS_TMP_DIR" "$LOCALES_DIR"

  if ! [ $? -eq 0 ]; then
    echo -e "${RED}Error: Handlebars build failed.${NO_COLOR}"
    rm -rf "$HANDLEBARS_TMP_DIR"
    exit 1
  fi
  echo -e "${GREEN}Successfully compiled Handlebars templates.${NO_COLOR}"

  #########
  # Compile internationalization strings
  #########

  # run static-i18n with flags determined by translations present in i18n
  langFlags="$(constructLanguageFlags)"

  echo -e "${DARK_GRAY}Compiling internationalization strings into HTML:${NO_COLOR}"

  cmd="npx static-i18n $langFlags -o $I18N_TMP_DIR $HANDLEBARS_TMP_DIR"
  echo -e "${DARK_GRAY}Running: $cmd${NO_COLOR}"
  eval $cmd

  # if success, move the tmp output to the end result
  if [ $? -eq 0 ]; then
    echo -e "${GREEN}Successfully compiled internationalization strings.${NO_COLOR}"
    rm -rf "$OUT_DIR"
    rm -rf "$HANDLEBARS_TMP_DIR"
    mv "$I18N_TMP_DIR" "$OUT_DIR"
  else
    echo -e "${RED}Error: Internationalization build failed.${NO_COLOR}"
    rm -rf "$I18N_TMP_DIR"
    rm -rf "$HANDLEBARS_TMP_DIR"
    exit 1
  fi

  # Ensure the CNAME file is present
  echo -e "${DARK_GRAY}Adding CNAME file${NO_COLOR}"
  echo $CUSTOM_DOMAIN > $OUT_DIR/CNAME

  # Copy assets file over
  echo -e "${DARK_GRAY}Copying assets into build dir${NO_COLOR}"
  cp -r $ASSETS_DIR $OUT_DIR

  echo -e "${GREEN}Build succeeded${NO_COLOR}"
)
